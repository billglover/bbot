service: bbot
frameworkVersion: ">=1.28.0 <2.0.0"

plugins:
  - serverless-domain-manager

custom:
  stage: ${self:provider.stage}
  stageConfig: ${file(./serverless_stages.yml):${self:custom.stage}}

  customDomain:
    domainName: ${self:custom.stageConfig.domainName}
    basePath: api
    certificateName: ${self:custom.stageConfig.certificateName}
    stage: ${self:custom.stage}
    createRoute53Record: true
    hostedZoneId: Z1EH888BF5XP0N
    endpointType: edge

provider:
  name: aws
  stackName: bbot-${self:provider.stage}
  apiName: bbot-${self:provider.stage}
  runtime: go1.x
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  endpointType: edge
  stackTags:
    project: bbot
  tags:
    project: bbot
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ssm:GetParameter*
        - ssm:DescribeParameters
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:ssm"
            - "Ref" : "AWS::Region"
            - "Ref" : "AWS::AccountId"
            - "parameter/bbot/${self:custom.stage}/*"
    - Effect: "Allow"
      Action:
        - sqs:SendMessage
      Resource:
        Fn::GetAtt:
          - flagMessageQueue
          - Arn
    - Effect: "Allow"
      Action:
        - sqs:SendMessage
      Resource:
        Fn::GetAtt:
          - sendMessageQueue
          - Arn
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource:
        Fn::GetAtt:
          - tokenTable
          - Arn
        
package:
  exclude:
    - ./**
  include:
    - ./bin/**
    - templates/*

functions:

  authHandler:
    handler: bin/authHandler
    events:
      - http:
          path: auth
          method: get
    environment:
      BUDDYBOT_STAGE: ${self:provider.stage}
      BUDDYBOT_AUTH_TABLE:
        Ref: tokenTable
      BUDDYBOT_REGION:
        Ref : "AWS::Region"

  actionHandler:
    handler: bin/actionHandler
    events:
      - http:
          path: action
          method: post
    environment:
      BUDDYBOT_STAGE: ${self:provider.stage}
      SQS_QUEUE_FLAGMESSAGE:
        Ref: flagMessageQueue

  msgFlagger:
    handler: bin/msgFlagger
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - flagMessageQueue
              - Arn
    environment:
      BUDDYBOT_STAGE: ${self:provider.stage}
      SQS_QUEUE_SENDMESSAGE:
        Ref: sendMessageQueue
      BUDDYBOT_AUTH_TABLE:
        Ref: tokenTable
      BUDDYBOT_REGION:
        Ref : "AWS::Region"

  msgSender:
    handler: bin/msgSender
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - sendMessageQueue
              - Arn
    environment:
      BUDDYBOT_STAGE: ${self:provider.stage}
      BUDDYBOT_AUTH_TABLE:
        Ref: tokenTable
      BUDDYBOT_REGION:
        Ref : "AWS::Region"

resources:
  Resources:
    flagMessageQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "bbot-flagMessageQueue-${self:provider.stage}"
        Tags:
          - Key: "project"
            Value: "bbot"
    sendMessageQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "bbot-sendMessageQueue-${self:provider.stage}"
        Tags:
          - Key: "project"
            Value: "bbot"
    tokenTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: bbot-tokens-${self:provider.stage}
        AttributeDefinitions: 
          - AttributeName: uid
            AttributeType: S
        KeySchema: 
          - AttributeName: uid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        SSESpecification:
          SSEEnabled: true
        Tags:
          - Key: "project"
            Value: "bbot"
